import numpy as np

def ordenamientoPorMezcla(unaLista, listaCompleta):
    print("Dividir ",unaLista)
    if len(unaLista)>1:
        #return unaLista
    #else:
        '''divido la tabla en dos'''
        mitad = len(unaLista)//2
        '''DE LA MITAD TOMO LA PARTE DERECHA'''
        mitadIzquierda = unaLista[:mitad]
        '''DE LA MITAD TOMO LA PARTE IZQUIERDA'''
        mitadDerecha = unaLista[mitad:]

        '''UTILIZO RECUSRSIVIDAD PARA VOLVER A DIVIDIR LA LISTA'''
        #izquierda = ordenamientoPorMezcla(mitadIzquierda)
        #derecha = ordenamientoPorMezcla(mitadDerecha)
        ordenamientoPorMezcla(mitadIzquierda, listaCompleta)
        ordenamientoPorMezcla(mitadDerecha, listaCompleta)
 
        #return ordenar(izquierda, derecha, unaLista)
        ordenar(mitadIzquierda, mitadDerecha)
        print("Arreglo completo:",listaCompleta)
        
    
#def ordenar(mitadIzquierda, mitadDerecha, unaLista):
def ordenar(mitadIzquierda, mitadDerecha):
    i, j = 0,0
    k=0
    
    result = np.zeros(len(mitadIzquierda) + len(mitadDerecha), int)
   
    while i < len(mitadIzquierda) and j < len(mitadDerecha):
        if mitadIzquierda[i] < mitadDerecha[j]:
            result[k] = mitadIzquierda[i]
            i=i+1
        else:
            result[k]=mitadDerecha[j]
            j=j+1
        k=k+1
    
    '''SI TENGO MAS NUMEROS EN LA MITAD IZQUIERDA LOS RECORRO Y LOS AGREGO'''
    while i<len(mitadIzquierda):
        result[k] = mitadIzquierda[i]
        i=i+1
        k=k+1
    
    '''SI TENGO MAS NUMEROS EN LA MITAD DERECHA LOS RECORRO Y LOS AGREGO'''
    while j<len(mitadDerecha):
        result[k] = mitadDerecha[j]
        j=j+1
        k=k+1
                
    i, j = 0,0
    
    for num in result:
        if(i<=len(mitadIzquierda) - 1):
            mitadIzquierda[i] = num
            i = i+1
            
        else:
            mitadDerecha[j] = num
            j=j+1
    
        
    print("Mezclar ",result)
    print("Mitad Izquierda Ordenada ",mitadIzquierda)
    print("Mitad Derecha Ordenada ",mitadDerecha)

def busquedaBinaria(arrayOrdenado, valorABuscar):
        if len(arrayOrdenado) == 0:
            return False
        else:
            posicionMitad = len(arrayOrdenado)//2
            if arrayOrdenado[posicionMitad]==valorABuscar:
              
              if valorABuscar<arrayOrdenado[posicionMitad]:
                return busquedaBinaria(arrayOrdenado[:posicionMitad],valorABuscar)
              else:
                return busquedaBinaria(arrayOrdenado[posicionMitad+1:],valorABuscar)  
            else:
                return True
              
      
        
    
    

vector = np.array([40,5,85,2,9,78,65,10,5,0])

print(vector)

ordenamientoPorMezcla(vector,vector)

print(vector)

numeroABuscar = 2

if(busquedaBinaria(vector, numeroABuscar)):
    
    print("EL NUMERO ", numeroABuscar , " SE ENCUENTRA EN EL ARRAY")
else:
    print("EL NUMERO ", numeroABuscar , " NO SE ENCUENTRA EN EL ARRAY")
    for num in result:
        if(i<=len(mitadIzquierda) - 1):
            mitadIzquierda[i] = num
            i = i+1
            
        else:
            mitadDerecha[j] = num
            j=j+1
    
        
    print("Mezclar ",result)
    print("Mitad Izquierda Ordenada ",mitadIzquierda)
    print("Mitad Derecha Ordenada ",mitadDerecha)
    print("Arreglo completo", unaLista)
    '''return result'''
        
def busquedaBinaria(arrayOrdenado, valorABuscar):
    '''PRIMERO SE BUSCA POR TODO EL ARRAY'''
    primeraPosicionArray = 0
    ultimaPosicionArray = len(arrayOrdenado) - 1
    encontrado = False
    
    '''SE VA A REPETIR MIENTRAS LA PRIMERA POSICION DEL ARRAY SEA MENOR IGUAL A LA ULTIMA
    Y QUE NO SE HAYA ENCONTRADO'''
    while primeraPosicionArray <= ultimaPosicionArray and not encontrado:
        '''BUSCO LA POSICION DE LA MITAD DEL ARRAY'''
        posicionMitad = (primeraPosicionArray + ultimaPosicionArray) // 2
        '''CONSULTO SI EL VALOR DE ESTA POSICION ES IGUAL AL VALOR QUE SE DESEA ENCONTRAR'''
        if arrayOrdenado[posicionMitad] == valorABuscar:
            encontrado = True
        
        else:
            '''CONSULTO SI EL VALOR A BUSCAR ES MAYOR AL VALOR QUE SE ENCUENTRA EN LA 
            POSICION DE LA MITAD DEL ARRAY'''
            if(valorABuscar > arrayOrdenado[posicionMitad]):
                '''SI ES ASI SOLO TENGO QUE BUSCAR EL VALOR DE LA MITAD PARA ARRIBA 
                POR LO QUE LA PRIMERA POSICION AHORA ES LA MITAD MAS UNO'''
                primeraPosicionArray = posicionMitad + 1
            else:
                ultimaPosicionArray = posicionMitad - 1
                
    return encontrado
       
        
        
        
unaLista = [54,26,93,17,77,31,44,55,20]
arrayOrdenado = ordenamientoPorMezcla(unaLista)
print(arrayOrdenado)

numeroABuscar = 17

if(busquedaBinaria(arrayOrdenado, numeroABuscar)):
    print("EL NUMERO ", numeroABuscar , " SE ENCUENTRA EN EL ARRAY")
else:
    print("EL NUMERO ", numeroABuscar , " NO SE ENCUENTRA EN EL ARRAY")
